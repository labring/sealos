{"version":3,"file":"index.mjs","sources":["../src/constants/api.ts","../src/constants/event.ts","../src/utils/index.ts","../src/app.ts","../src/master.ts"],"sourcesContent":["export enum API_NAME {\n  SYSTEM_CONNECT = \"system.connect\",\n  SYSTEM_DISCONNECT = \"system.disconnect\",\n  USER_GET_INFO = \"user.getInfo\",\n  EVENT_BUS = \"event-bus\"\n};","export enum EVENT_NAME {\n    GET_APPS = 'get-apps'\n}","export const isBrowser = () => typeof window !== 'undefined'\n\nexport const isIFrame = (input: HTMLElement | null): input is HTMLIFrameElement =>\n  input !== null && input.tagName === \"IFRAME\";\n\n// export { request } from \"./request\"","import { v4 } from 'uuid';\nimport { API_NAME, EVENT_NAME } from \"./constants\";\nimport { isBrowser } from \"./utils\";\nimport {\n  AppSendMessageType,\n  MasterReplyMessageType,\n  Session,\n  AppConstructorParam\n} from './types';\n\nclass ClientSDK {\n  private initialized = false\n  private desktopOrigin = \"*\"\n  private commonConfig = {\n    appKey: \"\",\n    clientLocation: \"\"\n  };\n\n  private readonly callback = new Map<string, (data: MasterReplyMessageType) => void>()\n\n  constructor(config: AppConstructorParam) {\n    this.commonConfig = {\n      appKey: config.appKey,\n      clientLocation: ''\n    };\n  }\n\n  private sendMessageToMaster(apiName: `${API_NAME}`, data: { [key: string]: any } = {}, needReply = true): Promise<any> {\n    if (!this.initialized) return Promise.reject(\"APP is uninitialized\")\n\n    const messageId = v4()\n\n    /* Equivalent to a response */\n    const cb = new Promise((resolve, reject) => {\n      if (needReply) {\n        /* timeout */\n        const timer = setTimeout(() => {\n          this.callback.delete(messageId)\n          reject('timeout')\n        }, 10000);\n\n        this.callback.set(messageId, (data: MasterReplyMessageType) => {\n          clearTimeout(timer)\n          if (data.success === true) {\n            resolve(data.data)\n          } else {\n            reject(data)\n            console.error(`message fail: ${data.message}`, data)\n          }\n        })\n      } else {\n        resolve(\"\")\n      }\n    })\n\n    /* Equivalent to a request */\n    const sendMessage: AppSendMessageType = {\n      messageId,\n      apiName,\n      ...this.commonConfig,\n      data\n    }\n\n    window.top?.postMessage(sendMessage, this.desktopOrigin)\n\n    return cb\n  }\n\n  init() {\n    console.log('sealos app init')\n    this.commonConfig.clientLocation = window.location.origin\n\n    const listenCb = ({ data, origin }: MessageEvent<MasterReplyMessageType>) => {\n      if (!data.messageId) return\n      if (!this.callback.has(data.messageId)) return\n\n      this.desktopOrigin = origin\n\n      // @ts-ignore nextline\n      this.callback.get(data.messageId)(data)\n      this.callback.delete(data.messageId)\n    }\n\n    /* add message listen to top */\n    window.addEventListener(\"message\", listenCb)\n\n    this.initialized = true\n\n    this.sendMessageToMaster(API_NAME.SYSTEM_CONNECT)\n\n    return () => {\n      console.log('sealos app destroy')\n      this.sendMessageToMaster(API_NAME.SYSTEM_DISCONNECT, {}, false)\n      window.removeEventListener('message', listenCb)\n    }\n  }\n\n  getUserInfo(): Promise<Session> {\n    return this.sendMessageToMaster(API_NAME.USER_GET_INFO)\n  }\n\n  // test api\n  getApps() {\n    return this.sendMessageToMaster(API_NAME.EVENT_BUS, {\n      eventName: EVENT_NAME.GET_APPS,\n      eventData: \"i am app, i want to get apps\"\n    })\n  }\n}\n\nexport let sealosApp: ClientSDK\n\nexport const createSealosApp = (config: AppConstructorParam) => {\n  if (!isBrowser()) {\n    console.error(\"This method need run in the browser.\")\n    return\n  }\n  sealosApp = new ClientSDK(config)\n  return sealosApp.init()\n}","import type {\n  MasterReplyMessageType,\n  AppSendMessageType,\n  TChild,\n  Session,\n  MasterInitParams\n} from \"./types\";\nimport { isIFrame, isBrowser } from './utils';\nimport { API_NAME } from \"./constants\";\n\nclass MasterSDK {\n  private initialized = false\n  private readonly connectedChild = new Map<string, TChild>()\n  private readonly eventBus = new Map<string, (e?: any) => { [key: string]: any } | void>()\n  private readonly apiFun: ({ [key: string]: (data: AppSendMessageType) => void }) = {\n    [API_NAME.SYSTEM_CONNECT]: () => { },\n    [API_NAME.USER_GET_INFO]: (data) => this.getUserInfo(data),\n    [API_NAME.SYSTEM_DISCONNECT]: (data) => this.disconnectChild(data),\n    [API_NAME.EVENT_BUS]: (data) => this.runEventBus(data)\n  }\n  private session?: Session\n\n  constructor() { }\n\n  private replyAppMessage({\n    appKey,\n    messageId,\n    success,\n    message = '',\n    data = {}\n  }: MasterReplyMessageType) {\n    const app = this.connectedChild.get(appKey)\n    if (!app) return\n\n    app.source.postMessage({\n      messageId,\n      success,\n      message,\n      data\n    }, {\n      targetOrigin: app.clientLocation\n    })\n  }\n\n  /**\n   * run in hook\n   */\n  init({\n    session,\n  }: MasterInitParams) {\n    console.log(\"init desktop onmessage\");\n    /* store master obj */\n    this.session = session;\n\n    const windowMessage = ({\n      data,\n      origin,\n      source\n    }: MessageEvent<AppSendMessageType>) => {\n      const {\n        apiName,\n        appKey,\n        messageId,\n      } = data || {};\n\n      if (!apiName || !appKey || !messageId || !source) {\n        this.replyAppMessage({\n          appKey,\n          messageId,\n          success: false,\n          message: \"params error\",\n        })\n        return\n      }\n\n      if (typeof this.apiFun[data.apiName] !== 'function') {\n        this.replyAppMessage({\n          appKey,\n          messageId,\n          success: false,\n          message: \"function is not declare\",\n        })\n        return\n      }\n\n      console.log(`receive message: `, data)\n\n      /* origin check */\n\n      /* app auth check */\n\n      if (data.apiName === API_NAME.SYSTEM_CONNECT) {\n        this.connectChild(data, origin, source)\n      } else {\n        this.apiFun[data.apiName](data)\n      }\n    }\n\n    window.addEventListener(\"message\", windowMessage);\n\n    this.initialized = true\n\n    return () => {\n      window.removeEventListener(\"message\", windowMessage);\n      console.log('stop desktop onmessage')\n    };\n  }\n\n  /**\n   * init connect. add user to cache\n   */\n  private connectChild(data: AppSendMessageType, origin: string, source: MessageEventSource) {\n    const { appKey, messageId } = data\n\n    /* check dom is already */\n    const dom = window.document.getElementById(\"app-window-\" + appKey);\n    if (!isIFrame(dom)) {\n      this.replyAppMessage({\n        appKey,\n        messageId,\n        success: false,\n        message: \"Invalid connection\",\n      })\n      return\n    }\n\n    this.connectedChild.set(appKey, {\n      source,\n      appKey,\n      clientLocation: origin,\n    });\n\n    console.log(`connect app`, this.connectedChild.get(appKey));\n    this.replyAppMessage({\n      appKey,\n      messageId,\n      success: true,\n      data: {\n        connected: true\n      }\n    })\n  }\n\n  private disconnectChild(data: AppSendMessageType) {\n    const { appKey } = data\n    this.connectedChild.delete(appKey)\n\n    console.log(this.connectedChild, 'disconnect');\n  }\n\n  /**\n   * add event bus\n   */\n  addEventListen(name: string, fn: (e?: any) => { [key: string]: any }) {\n    if (this.eventBus.has(name)) {\n      console.error(\"event bus name repeat\")\n      return\n    }\n    if (typeof fn !== 'function') {\n      console.error(\"event is not a function\")\n      return\n    }\n    this.eventBus.set(name, fn)\n  }\n\n  /**\n   * run event bus function\n   */\n  private async runEventBus(data: AppSendMessageType) {\n    const { appKey, messageId, data: { eventName, eventData } } = data\n    if (!this.eventBus.has(eventName)) {\n      this.replyAppMessage({\n        appKey,\n        messageId,\n        success: false,\n        message: \"event is not register\"\n      })\n    } else {\n      // @ts-ignore nextline\n      const res = await this.eventBus.get(eventName)(eventData)\n      this.replyAppMessage({\n        appKey,\n        messageId,\n        success: true,\n        data: res || {}\n      })\n    }\n  }\n\n  private getUserInfo(data: AppSendMessageType) {\n    if (this.session) {\n      this.replyAppMessage({\n        appKey: data.appKey,\n        messageId: data.messageId,\n        success: true,\n        data: this.session\n      })\n    } else {\n      this.replyAppMessage({\n        appKey: data.appKey,\n        messageId: data.messageId,\n        success: false,\n        message: \"请先未登录\"\n      })\n    }\n  }\n}\n\nexport let masterApp: MasterSDK\n\nexport const createMasterAPP = (config: MasterInitParams) => {\n  if (!isBrowser()) {\n    console.error(\"This method need run in the browser.\")\n    return\n  }\n  masterApp = new MasterSDK()\n\n  return masterApp.init(config)\n}"],"names":["API_NAME","EVENT_NAME","data"],"mappings":"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"}