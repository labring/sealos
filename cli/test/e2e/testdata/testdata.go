// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package testdata generated by go-bindata.
// sources:
// testdata/containerd-svc-etcd.yaml
// testdata/containerd-svc-sans.yaml
// testdata/containerd-svc-taints.yaml
// testdata/custome-containerd-svc.yaml
// testdata/custome-docker-svc.yaml
// testdata/docker-svc-sans.yaml
package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdataContainerdSvcEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4d\x0e\xdb\x20\x10\x85\xf7\x9c\x02\x65\x6f\x30\xce\x6f\xd9\xe6\x08\x95\xba\xad\xc6\x66\x62\x23\x63\x40\xcc\xd8\xed\xf1\x2b\xe2\x54\x72\x76\xc3\xfb\x46\xc3\xd3\x07\xd9\xff\xc2\x42\x3e\x45\x2b\x21\x67\x52\x84\x10\x12\x29\x9f\xf4\x66\x7a\x64\x30\x62\xf6\xd1\x59\xf9\x0c\x2b\x31\x16\xb1\x20\x83\x03\x06\x2b\xa4\x8c\xb0\xa0\x95\x0e\x5f\xb0\x06\x16\x94\x71\xa8\xe9\x94\x88\xa9\x0e\x8d\xf4\xf9\x3d\xd4\xd1\x74\x77\xd5\xaa\x56\x19\xdb\x75\xef\xa8\xa4\x80\x1f\x5a\xf9\x02\xef\xf3\xff\x9f\xb0\xb8\xdb\x45\x48\xe9\x17\x18\x71\x3f\x16\xa0\x2f\x3e\x8e\x7a\x5e\x7b\x2c\x11\x19\xc9\x6e\x46\x75\x57\xd5\x7e\xe1\x09\xc3\x62\xb7\xb3\x7a\xa8\xee\x2b\x1f\x20\xf8\x21\x55\xd2\x5d\x94\x11\x52\x12\x4d\xfb\xf7\x79\xb6\x52\x97\x94\x58\x2b\xa2\x49\x7b\xf7\xbb\x10\xec\x24\x15\xb6\xf2\x53\x78\x25\x2c\x56\xd6\x3d\xd1\x34\x8d\x38\x9a\xab\x95\xc0\x2d\x6a\x7e\x1c\xcc\x75\xdf\xe6\x9e\x29\xbe\xfc\xb8\x16\x60\x9f\xa2\x88\xc8\x7f\x52\x99\x7d\x1c\x6b\x07\xc2\xb2\xf9\x01\x7f\xae\x7d\x44\xb6\xf2\x64\xda\x56\x5d\x6f\xd5\x97\x36\xb7\x93\x40\x1e\x5c\x5d\xc3\xbf\x8c\x25\x42\xd8\x6b\x63\x74\x39\xf9\xc8\x07\x89\x13\x73\xb6\x5a\x1f\x5c\x9f\xef\x3f\xc4\xbf\x00\x00\x00\xff\xff\x26\x32\x9c\xf1\xe4\x01\x00\x00")

func testdataContainerdSvcEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataContainerdSvcEtcdYaml,
		"testdata/containerd-svc-etcd.yaml",
	)
}

func testdataContainerdSvcEtcdYaml() (*asset, error) {
	bytes, err := testdataContainerdSvcEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/containerd-svc-etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataContainerdSvcSansYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xbf\x6e\xf3\x30\x0c\xc4\x77\x3d\x85\x90\xdd\xb4\xa5\x2f\xff\x3e\x6d\x45\xf6\x2e\x01\xba\x16\xb4\xcd\xd8\x82\x2d\xc9\x20\x65\xf7\xf5\x0b\x25\x29\x90\x6c\xc7\x3b\x82\x3c\xfc\x70\xf1\x5f\xc4\xe2\x53\x74\x1a\x97\x45\x40\x08\xe7\x24\xe0\x53\xbd\x99\x96\x32\x1a\x35\xf9\xd8\x3b\x7d\x99\x57\xc9\xc4\x2a\x50\xc6\x1e\x33\x3a\xa5\x75\xc4\x40\x4e\xf7\x74\xc3\x75\xce\x4a\x16\xea\x8a\x3b\x26\xc9\x52\x44\xa5\xfd\x72\x17\x45\x1a\x7b\x82\x06\x1a\x30\xce\xda\xbb\xc5\x69\xa6\x67\x5a\xf2\x80\xf7\xf3\x7f\x23\x86\xfe\xb8\x57\x5a\xfb\x80\x03\x3d\x8e\xcd\xd8\xb2\x8f\x43\x3d\xad\x2d\x71\xa4\x4c\xe2\x36\x03\xf6\x00\xcd\x5b\x3c\xd2\x1c\xdc\xf6\x0f\xce\x60\xdf\xfc\x0e\x67\xdf\xa5\x92\xd8\x3d\x18\xa5\xb5\xc8\xf8\x78\xbf\x4c\x4e\xd7\x9c\x52\xae\x41\x64\xac\x7d\xff\xcd\x82\x8f\x24\x71\x76\xfa\x59\x78\x15\x62\xa7\xcb\x9e\xaa\xaa\x4a\xbd\x92\x2b\x95\xb0\x0f\x30\x9d\x5f\xc8\xd9\x77\x72\x97\x14\x6f\x7e\x58\x19\xb3\x4f\x51\x45\xca\x3f\x89\x27\x1f\x87\xd2\x41\x88\x37\xdf\xd1\x75\x6d\x23\x65\xa7\x77\xa6\x69\xe0\x70\x28\xbc\x6a\x73\xdc\x95\x57\x57\xe2\x8d\xb8\xec\x76\xc4\xf9\xfa\xf1\xf9\x24\x6c\xfe\x5b\x30\xc7\x33\x9c\x2c\x98\xa6\x51\xbf\x01\x00\x00\xff\xff\xdd\xd2\xcc\x7d\xcf\x01\x00\x00")

func testdataContainerdSvcSansYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataContainerdSvcSansYaml,
		"testdata/containerd-svc-sans.yaml",
	)
}

func testdataContainerdSvcSansYaml() (*asset, error) {
	bytes, err := testdataContainerdSvcSansYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/containerd-svc-sans.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataContainerdSvcTaintsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x50\xbb\x6e\xdc\x30\x10\xec\xf9\x15\x0b\xf7\x47\x3d\x6c\x5f\x0c\xb6\xae\xd2\xb8\x88\x01\xb7\xc1\x9e\xb8\x27\x2d\x44\x91\x02\x77\xa9\x20\x7f\x1f\x50\x3a\x07\xbe\xca\xdd\x68\x46\x9c\x9d\x19\x5c\xf9\x83\xb2\x70\x8a\x0e\x70\x5d\xc5\x0a\x61\x48\x62\x39\x35\x5b\x77\x21\xc5\xce\xcc\x1c\xbd\x83\xd7\x50\x44\x29\x9b\x85\x14\x3d\x2a\x3a\x03\x10\x71\x21\x07\x9e\xae\x58\x82\x1a\x59\x69\xa8\xec\x94\x44\xa5\x82\x13\xf0\xba\x83\x0a\xbb\xfe\x87\x6d\x6d\x6b\x3b\xd7\xf7\x3b\x95\x53\xa0\x9b\x5a\xf5\x05\x77\xfb\xcf\x4f\x5c\xfc\xf9\xc9\x00\xf0\x82\x23\x1d\x66\x01\x2f\x99\xe3\xd8\xcc\xe5\x42\x39\x92\x92\xb8\xad\xb3\xfd\xb3\x6d\xef\xe4\x89\xc2\xe2\xb6\x47\xfb\x62\xfb\x3b\x7e\xc0\xc0\x43\xaa\x4a\xff\x64\x3b\x03\x20\x32\x1d\xe7\xd7\xd9\x41\x93\x53\xd2\xc6\x8a\x4c\x0d\xfb\xdf\x59\xf0\x50\x52\x56\x07\xb7\xc0\x45\x28\x3b\xa8\xff\x99\xd3\xe9\x64\xbe\x2e\x57\x23\xa1\x5f\xec\xfc\xf2\x65\xb9\xfe\x7e\xb9\xd7\x14\xaf\x3c\x96\x8c\xca\x29\x9a\x48\xfa\x27\xe5\x99\xe3\x58\x33\x08\xe5\x8d\x07\x7a\x2f\x97\x48\xea\xe0\xa1\x6b\x5b\xfb\x7c\xae\x7b\x35\xdd\xf9\x61\x3f\x17\x93\xa7\x5f\x34\xb2\xe8\xe1\x50\x9f\x29\x72\xfc\x9c\x9a\xae\x57\x1a\xd4\xc1\x5b\x7a\x1f\x26\xf2\x25\xd0\x1e\x7a\xa6\xbf\xff\xe3\xbd\x25\x7f\x90\x1b\x86\x42\x0e\x74\xa2\x8f\x8a\xbe\xaf\xf2\x78\xab\xf2\x33\xb2\xde\xf7\xf8\x17\x00\x00\xff\xff\x4b\x83\x07\x28\x40\x02\x00\x00")

func testdataContainerdSvcTaintsYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataContainerdSvcTaintsYaml,
		"testdata/containerd-svc-taints.yaml",
	)
}

func testdataContainerdSvcTaintsYaml() (*asset, error) {
	bytes, err := testdataContainerdSvcTaintsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/containerd-svc-taints.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataCustomeContainerdSvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcd\x6e\xc2\x30\x10\x84\xef\x7e\x8a\x15\xf7\x38\xb1\x0b\x14\xf9\xca\x23\x54\xea\xb5\xda\x24\x4b\xb2\x8a\x7f\x22\xaf\x93\xbe\x7e\x65\xa0\x12\xdc\xc6\xf3\x59\xb3\xa3\xc1\x95\xbf\x29\x0b\xa7\xe8\x00\xd7\x55\xb4\x10\xfa\x24\x9a\x53\xbb\x9b\x9e\x0a\x1a\xb5\x70\x1c\x1d\x5c\xfd\x26\x85\xb2\x0a\x54\x70\xc4\x82\x4e\x01\x44\x0c\xe4\x60\xa4\x1b\x6e\xbe\x28\x59\x69\xa8\xee\x9c\xa4\x48\x15\x0d\xf0\x7a\x17\x55\x1a\xfb\xa9\x3b\xdd\x69\xe3\xac\xbd\x5b\x39\x79\x7a\xd2\xca\x03\xde\xe3\xff\x9f\x18\xc6\xf3\x51\x01\x70\xc0\x89\x1e\x61\x1e\xfb\xcc\x71\x6a\x97\xad\xa7\x1c\xa9\x90\xb8\xdd\x68\x7b\xd2\xdd\x1b\x9e\xc9\x07\xb7\x7f\xe8\x8b\xb6\x6f\xfe\x80\x9e\x87\x54\x89\x3d\x6a\xa3\x00\x44\xe6\xc7\xf9\x75\x71\xd0\xe6\x94\x4a\xab\x45\xe6\x96\xc7\x9f\x2c\xf8\x20\x29\x17\x07\xcf\xc2\x9b\x50\x76\x50\xff\xa9\xa6\x69\xd4\xeb\x72\xb5\x12\x8e\x41\x2f\x97\x97\xe5\xec\xfb\x72\xd7\x14\x6f\x3c\x6d\x19\x0b\xa7\xa8\x22\x95\xdf\x94\x17\x8e\x53\xed\x20\x94\x77\x1e\xe8\x6b\xeb\x23\x15\x07\x07\xd3\x75\xfa\x74\xae\x7b\xb5\xe6\x7c\x50\x7f\x01\x00\x00\xff\xff\x36\x22\xce\x71\xa5\x01\x00\x00")

func testdataCustomeContainerdSvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataCustomeContainerdSvcYaml,
		"testdata/custome-containerd-svc.yaml",
	)
}

func testdataCustomeContainerdSvcYaml() (*asset, error) {
	bytes, err := testdataCustomeContainerdSvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/custome-containerd-svc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataCustomeDockerSvcYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xcd\x6a\xc3\x30\x10\x84\xef\x7a\x8a\x25\x77\xcb\x96\x9b\xa4\x41\xd7\x3c\x42\xa1\xd7\xb2\xb6\x36\xb6\xb0\x7e\xcc\xae\xec\xbe\x7e\x51\x92\x42\x72\x9b\x9d\x59\x86\xe1\xc3\xd5\x7f\x13\x8b\xcf\xc9\x02\xae\xab\x68\x21\x0c\x59\xb4\xcf\xed\x6e\x06\x2a\x68\xd4\xe2\x93\xb3\x70\x0d\x9b\x14\x62\x15\xa9\xa0\xc3\x82\x56\x01\x24\x8c\x64\xc1\xd1\x0d\xb7\x50\x94\xac\x34\x56\x77\xce\x52\xa4\x8a\x06\xfc\x7a\x17\x55\x9a\xfe\x53\x77\xba\xd3\xc6\xf6\xfd\xdd\xe2\x1c\xe8\x99\xd6\x3c\xe2\xbd\xfe\xff\xc4\xe8\xce\x47\x05\xe0\x23\x4e\xf4\x28\x0b\x38\xb0\x4f\x53\xbb\x6c\x03\x71\xa2\x42\xd2\xb8\x3c\x2e\xc4\x76\x37\xba\x3f\xe9\xee\xed\x6b\xa6\x10\xed\xfe\xa1\x2f\xba\x7f\xf3\x47\x0c\x7e\xcc\x35\xe9\x8f\xda\x28\x00\x91\xf9\xb1\x62\x5d\x2c\xb4\x9c\x73\x69\xb5\xc8\xdc\x7a\xf7\xc3\x82\x8f\x24\x73\xb1\xf0\xdc\xbd\x09\xb1\x85\xfa\xa7\x9a\xa6\x51\xaf\x00\xeb\x32\x74\x51\x2f\x97\x17\x80\xfd\x3b\xc0\x6b\x4e\x37\x3f\x6d\x8c\xc5\xe7\xa4\x12\x95\xdf\xcc\x8b\x4f\x53\xdd\x20\xc4\xbb\x1f\xe9\x6b\x1b\x12\x15\x0b\x07\xd3\x75\xfa\x74\xae\xd8\x5a\x73\x3e\xa8\xbf\x00\x00\x00\xff\xff\x2d\x56\x4d\x45\xac\x01\x00\x00")

func testdataCustomeDockerSvcYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataCustomeDockerSvcYaml,
		"testdata/custome-docker-svc.yaml",
	)
}

func testdataCustomeDockerSvcYaml() (*asset, error) {
	bytes, err := testdataCustomeDockerSvcYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/custome-docker-svc.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataDockerSvcSansYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xbf\x8e\xb3\x30\x10\xc4\x7b\x3f\x85\x95\x9e\x05\xfb\xcb\xbf\xcf\xdd\x29\xfd\x35\x91\xae\x3d\x2d\xb0\x01\x0b\x6c\xa3\x5d\xc3\xbd\xfe\xc9\x49\x4e\x4a\xba\xf1\xcc\x68\x3d\xfa\xe1\xe2\xbf\x88\xc5\xa7\xe8\x34\x2e\x8b\x80\x10\xce\x49\xc0\xa7\x7a\x33\x2d\x65\x34\x6a\xf2\xb1\x77\xfa\x32\xaf\x92\x89\x55\xa0\x8c\x3d\x66\x74\x4a\xeb\x88\x81\x9c\xee\xe9\x86\xeb\x9c\x95\x2c\xd4\x15\x77\x4c\x92\xa5\x88\x4a\xfb\xe5\x2e\x8a\x34\xf6\x04\x0d\x34\x60\x9c\xb5\x77\x8b\xd3\x4c\xcf\xb4\xe4\x01\xef\xe7\xff\x9e\x18\xfa\xe3\x5e\x69\xed\x03\x0e\xf4\x38\x36\x63\xcb\x3e\x0e\xf5\xb4\xb6\xc4\x91\x32\x49\xd5\xa7\x6e\x22\x76\x9b\x01\x7b\x80\xe6\xad\x35\xd2\x1c\xdc\xf6\x0f\xce\x60\xdf\xfc\x0e\x67\xdf\xa5\x92\xd8\x3d\x18\xa5\xb5\xc8\xf8\x58\xb1\x4c\x4e\xd7\x9c\x52\xae\x41\x64\xac\x7d\xff\xcd\x82\x8f\x24\x71\x76\xfa\xb9\x7b\x15\x62\xa7\x4b\x4f\x55\x55\xa5\x5e\x01\x96\x65\xd8\x07\x98\xce\x2f\x00\xed\x3b\xc0\x4b\x8a\x37\x3f\xac\x8c\xd9\xa7\xa8\x22\xe5\x9f\xc4\x93\x8f\x43\xd9\x20\xc4\x9b\xef\xe8\xba\xb6\x91\xb2\xd3\x3b\xd3\x34\x70\x38\x14\x6c\xb5\x39\xee\xca\x57\x57\xe2\x8d\xb8\x74\x3b\xe2\x7c\xfd\xf8\x7c\x82\x36\xff\x2d\x98\xe3\x19\x4e\x16\x4c\xd3\xa8\xdf\x00\x00\x00\xff\xff\xdb\x8b\x8e\x43\xd6\x01\x00\x00")

func testdataDockerSvcSansYamlBytes() ([]byte, error) {
	return bindataRead(
		_testdataDockerSvcSansYaml,
		"testdata/docker-svc-sans.yaml",
	)
}

func testdataDockerSvcSansYaml() (*asset, error) {
	bytes, err := testdataDockerSvcSansYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/docker-svc-sans.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/containerd-svc-etcd.yaml":    testdataContainerdSvcEtcdYaml,
	"testdata/containerd-svc-sans.yaml":    testdataContainerdSvcSansYaml,
	"testdata/containerd-svc-taints.yaml":  testdataContainerdSvcTaintsYaml,
	"testdata/custome-containerd-svc.yaml": testdataCustomeContainerdSvcYaml,
	"testdata/custome-docker-svc.yaml":     testdataCustomeDockerSvcYaml,
	"testdata/docker-svc-sans.yaml":        testdataDockerSvcSansYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"testdata": {nil, map[string]*bintree{
		"containerd-svc-etcd.yaml":    {testdataContainerdSvcEtcdYaml, map[string]*bintree{}},
		"containerd-svc-sans.yaml":    {testdataContainerdSvcSansYaml, map[string]*bintree{}},
		"containerd-svc-taints.yaml":  {testdataContainerdSvcTaintsYaml, map[string]*bintree{}},
		"custome-containerd-svc.yaml": {testdataCustomeContainerdSvcYaml, map[string]*bintree{}},
		"custome-docker-svc.yaml":     {testdataCustomeDockerSvcYaml, map[string]*bintree{}},
		"docker-svc-sans.yaml":        {testdataDockerSvcSansYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
