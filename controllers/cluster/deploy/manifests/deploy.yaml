apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: cluster-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: clusters.cluster.sealos.io
spec:
  group: cluster.sealos.io
  names:
    kind: Cluster
    listKind: ClusterList
    plural: clusters
    singular: cluster
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Cluster is the Schema for the clusters API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ClusterSpec defines the desired state of InfraMetadata
            properties:
              command:
                description: 'Entrypoint array. Not executed within a shell. The docker image''s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container''s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell'
                items:
                  type: string
                type: array
              env:
                description: 'Why env not using map[string]string Because some argument is list, like: CertSANS=127.0.0.1 CertSANS=localhost, if ENV is map, will merge those two values but user want to InfraMetadata a list, using array we can convert it to {CertSANS:[127.0.0.1, localhost]}'
                items:
                  type: string
                type: array
              hosts:
                items:
                  properties:
                    env:
                      description: overwrite env
                      items:
                        type: string
                      type: array
                    ips:
                      items:
                        type: string
                      type: array
                    roles:
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              image:
                items:
                  type: string
                type: array
              infra:
                description: 'desired state of cluster Important: Run "make" to regenerate code after modifying this file Foo is an example field of Cluster. Edit Cluster_types.go to remove/update'
                type: string
              ssh:
                properties:
                  passwd:
                    type: string
                  pk:
                    type: string
                  pkData:
                    type: string
                  pkName:
                    type: string
                  pkPasswd:
                    type: string
                  port:
                    type: integer
                  user:
                    type: string
                type: object
            type: object
          status:
            description: ClusterStatus defines the observed state of Cluster
            properties:
              conditions:
                items:
                  description: ClusterCondition describes the state of a cluster at a certain point.
                  properties:
                    lastHeartbeatTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              mounts:
                items:
                  properties:
                    cmd:
                      items:
                        type: string
                      type: array
                    entrypoint:
                      items:
                        type: string
                      type: array
                    env:
                      additionalProperties:
                        type: string
                      type: object
                    imageName:
                      type: string
                    labels:
                      additionalProperties:
                        type: string
                      type: object
                    mountPoint:
                      type: string
                    name:
                      type: string
                    type:
                      type: string
                  required:
                  - imageName
                  - mountPoint
                  - name
                  - type
                  type: object
                type: array
              phase:
                type: string
              status:
                description: 'Important: Run "make" to regenerate code after modifying this file'
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-controller-manager
  namespace: cluster-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-leader-election-role
  namespace: cluster-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: cluster-manager-role
rules:
- apiGroups:
  - cluster.sealos.io
  resources:
  - clusters
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - cluster.sealos.io
  resources:
  - clusters/finalizers
  verbs:
  - update
- apiGroups:
  - cluster.sealos.io
  resources:
  - clusters/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - infra.sealos.io
  resources:
  - infras
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-leader-election-rolebinding
  namespace: cluster-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-leader-election-role
subjects:
- kind: ServiceAccount
  name: cluster-controller-manager
  namespace: cluster-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-manager-role
subjects:
- kind: ServiceAccount
  name: cluster-controller-manager
  namespace: cluster-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-proxy-role
subjects:
- kind: ServiceAccount
  name: cluster-controller-manager
  namespace: cluster-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 4c1c3188.sealos.io
    # leaderElectionReleaseOnCancel defines if the leader should step down volume
    # when the Manager ends. This requires the binary to immediately end when the
    # Manager is stopped, otherwise, this setting is unsafe. Setting this significantly
    # speeds up voluntary leader transitions as the new leader don't have to wait
    # LeaseDuration time first.
    # In the default scaffold provided, the program ends immediately after
    # the manager stops, so would be fine to enable this option. However,
    # if you are doing or is intended to do any operation such as perform cleanups
    # after the manager stops then its usage might be unsafe.
    # leaderElectionReleaseOnCancel: true
kind: ConfigMap
metadata:
  name: cluster-manager-config
  namespace: cluster-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: cluster-controller-manager-metrics-service
  namespace: cluster-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: cluster-controller-manager
  namespace: cluster-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: ghcr.io/labring/sealos-cluster-controller:dev
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: cluster-controller-manager
      terminationGracePeriodSeconds: 10
