import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';
import { Base64 } from 'js-base64';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getLocalAdminKubeConfig = () => {
  const config: string | undefined = process.env.ADMINTOKEN;
  // console.log('base64 config:', config);
  if (!config) {
    throw new Error('KUBECONFIG environment variable is not defined');
  }
  // console.log('config:', Base64.decode(config));
  return Base64.decode(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
  - cluster:
      certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJMU1EWXlNekUxTWpnMU5Gb1lEekl4TWpVd05UTXdNVFV5T0RVMFdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnFpVlR2d2NqMFp1K3pmZnBWblpuT3dBNDV6NytXUEFrcUxuSTlHTG83QlhUSHg5cHFRUjZKenB3RU0zbmVwUTkKclJGWndPSGl3Zi9QZHpQdnFhZnpqZEg0REtQTldrQloxU0poOE5IL1pWZFI2RGdab1hxTjFVT0RQNTd4Tm9JRApScWFFOGlvZERVSmJoZTlkS21scjhPWFFVaWIxcWNhRVBKbzk0YmlrWDNKRWZRZTNZSEJNRk9tTlRZMmZscFZBCnBYbzl3UkdTa1hJVlg3RE5LNkxOUURMcU44MEVjZEFpRk5vVWQreHFCSlZSNVlJMVl4K09xY0FKQnJ1eTVWcHgKVFB5bVcvKzl0dTFhV09jNTN5VjBGOC92bGMveU1JMlNVVk5pVWhhZk83S3VqMDZTczg0bk9lNWlqM1E1ZlAxVQpzV1NEMWY1SkxzaG10SHovZm0xUHR3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVUwQm1mNC8yeXNUeElTTWVZRTZQbEY5cnZ4RHN3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFIVTkxY05GVWVUbUdZYTVUaWNmcFRkUEpiN0tZRmhTY2Q4aVEvNGRsSVhGWXYvawpUKzB0QXBTVnhGLzhBS0J0SlYzcTB5RTkvTjR3aXRlc3FrNHk0dmVnUVRscXFvRWREZUdTNERNcTVpdmhIbXRNCkZmcDBWdThlVDVoUzNJeEpST3JWb3greGxXeUdkNEFnQnJuVlhGZXVrRlk0OUg0SVI0UkZGK0dGaStqalhrMEMKNGJFQk41T0V0bEtUT0hrbTF2aGFFcTlGRzBUSjMrNmovQVQrdlpaYWRIZ0dlZUZRT0QxRGF3eXBQWmlPby9wRQpDNkEwK3BLWU9IWldvZVgzY2IzY0x5b1Z3NkNQUFpFMXBYM2xHUDZTT0ZlV2RhRldXSDhocDVtcFB4U3lKMlJaClRHa2o4eFkrT3VWaXRrTWNXNmx5eGY1L252eksvckhKQ3RGVzZyOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      server: https://192.168.31.40:6443
    name: kubernetes
contexts:
  - context:
      cluster: kubernetes
      user: kubernetes-admin
    name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
  - name: kubernetes-admin
    user:
      client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJT1hpNU5DaFk2dll3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRBMk1qTXhOVEk0TlRSYUdBOHlNVEkxTURVek1ERTFNamcxTmxvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzlLdHJrd1BNK1JwcFgKZ2Y1WGdaTmhNSWczVCtpOGZ6am5jT0dGWkcxT201c2VTcTJ3SW1wUjRPZXZraVFKMkV5dlNkUGhXbURFODQrawpNT2lLUmJGU3ZUaWVBV3h3cnU0RmZQWHNoSGZPbkE5OHRIUmNRSkVISG5qalRPV2U1MjF3MVVqMXR2U21QUkw2CklUczVHSmpCRUNySUIvWUVuVlZHTDNQRkdLK1ZDNFhwdUhrUjF2Q0NadkpkNERqL2d6ZjhpeWxjbWJCM1NZYXkKT3B2VjJKVTkvNUtQMXBNL1Z0QUdRd21QcVBtazVQM3hiOFJlYVNrRktQZ0IrYS9zOTR5cTNxc0c1ejdHVUh2NwoxNDcwTG9FSVNNek9KZldQdTd0K0lBQUU4YmU4TzFyNkNuMHF2M241OHRsWjgxOTBERFV4M1hkZW9WeVpmaHVrCmt1M21LbElmQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlRRR1ovai9iS3hQRWhJeDVnVG8rVVgydS9FT3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFubllhZ1F6eDZQaVgvUHJ6WDM4bUlLby9WWkZJY0tEaFZDcVh1Z2dpM3Ftd3ZJdG8xb2J6CjIvbmRIWW1nTFQ0bnYyVVErcndHR0tpMGRyMjF5QWdzZW04NTF1RXNxZTNSS0orNzUwcUUxbW1wTmFWOVRKL2QKMkNGZUozNDAxM3BNcytyakhYbUo2T0xqQ1lkVjFuMllOQmZOVWNXckNteE1vaU9PZ3dQekZlYlhMdTFkZjBRYQpka1BXTmk2dzhudU91bWppTjV2cVRFbkMxUDZ2MUlFSUV5Rkk1QURZbjZ4MnNaKzhOK1laMERoeVNCVlF3SVZyClY3aFUvRlNMeno5eU82b1N2WFhGRjI1THRBenEwRmFoU1VEZ0JsTjc2blRTTHg5dW9XeDFicWF5Y0ZUS01CQnEKNjEzc04zZUNPNjZwdWNpeGJzc1NLUEYzQ2xxVjM5Q25XZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdlNyYTVNRHpQa2FhVjRIK1Y0R1RZVENJTjAvb3ZIODQ1M0RoaFdSdFRwdWJIa3F0CnNDSnFVZURucjVJa0NkaE1yMG5UNFZwZ3hQT1BwRERvaWtXeFVyMDRuZ0ZzY0s3dUJYejE3SVIzenB3UGZMUjAKWEVDUkJ4NTQ0MHpsbnVkdGNOVkk5YmIwcGowUytpRTdPUmlZd1JBcXlBZjJCSjFWUmk5enhSaXZsUXVGNmJoNQpFZGJ3Z21ieVhlQTQvNE0zL0lzcFhKbXdkMG1Hc2pxYjFkaVZQZitTajlhVFAxYlFCa01KajZqNXBPVDk4Vy9FClhta3BCU2o0QWZtdjdQZU1xdDZyQnVjK3hsQjcrOWVPOUM2QkNFak16aVgxajd1N2ZpQUFCUEczdkR0YStncDkKS3I5NStmTFpXZk5mZEF3MU1kMTNYcUZjbVg0YnBKTHQ1aXBTSHdJREFRQUJBb0lCQVFDcjdJWVMvNVpUVkVHMApKSTR2bzdGNTFHMElzRlNhOUptWUoweWdPbnpwdzV6QWRDalZld0hjTnFiN043d1BRb20zaWtiS2VxU1dlN0ppCkRKMWNCaWs2UklWdmZXVzhLQkJsNW9Od0daajFxM3FiNFRvY0dnWjFUT21iMCtpaGVqNUtIVjU1QzNYZ25JTmgKMTlBR2ZXZGZtRHo1bmRxbnFRSzJqaXdPeHZmVllaZCthL2E5RndkV1ROTUtVWkNLN2JVWE5Pc2c5S1IrcFdSTwpTTVRYUWp3S0tmWUpRM1FvT1NXdmdhSTRUbGdVN1dURHBPSEZXSGphek55cDUzRG84eGcwODJyc3FiNnplSmYxCjYxM1V2dVZDOW9JSVlneFk4enhEQmhQVUViUzV1RFhPUEsyRk0wN09HbzRFNTZLM0Fsd0JiNUdINXNMODhFVEEKZExtU3E0dlpBb0dCQVBtU2x1aFdhRkdjZU9BOHNtRVZJNDYzMlU1WlVweHk1R3poWE80eTVUZmpUK0xCZ3NILwpRKzk0Nk9pYWx1NlBmOHhYRENOU0FyQm85N25INUVFdFFOZmpDcjVHaWRyVUlPRER5VmZEK2lQUUZJSjVsUWxjCmV4ditjQTg5TmNZQ0FMTitjS1NvZzB6Rk5iSUVlT2g2c29JQzJMbnN1VEdWTUl6TmFRcWRFWnhsQW9HQkFNSUsKQk81ODQ1akNYaXhlTzhMR3B2U3l0YmpsWS9yb1BVbjR3Myt3N0VzUWpnektwWEEyVElFMk5yRnlYTXZWWHVUdQpjak9rZzFPc0ZVcVgyUWkyb0xWZm5kYjEycjVTcE4vazN3ZDhFYmJBVE93S3ZEZWUrV2k0VkNtT1JzN3BmV2gxCnNxRCtEQ1IzYW9Ib1NBVm0xUTlxS1JFTkpOOS9temdsdGhabVMrSXpBb0dCQUpwNzRjdXBpT05UbndMMnIxZ20KMUo3SU1Nd3R3RlExVGk0VGhnbXdHWER4MVFaQTBHYXpVdU1PRGVYRm96M0NOOUpONDZhTllqcStqdkZCeVltSwpzSU94OTNsMmdtaWhQRVRGRElHMlBzVWlUVC9DY0wyZHNGclFzWjdOUGRiMmNHYXJFcURwNm5SLzhrL2lNdEY4CitiZytlTmNGc0ZEL3oxQ282YWQzT0dwOUFvR0FUdU90NzV4ZEdGMWwxbG9WcC9JR0xSUi9aNFh6NlM0RXhROWIKeEkyVTlFdnR4T3VhNlkxWisycWtQKzdFSmFkQlpvZy9iQm1sdng0R3BnWW9taTlPRlkralo2TWJaU2ZLbXJDOQpzSmhUeDE1VnA5NFJlZmVyWlZVVCtyVTZ1cU1aZHAvcm1TTFFvdjdlRWFUenF5YU0xekNOTTc2SlVFamNQYTZ2Cllsb0MzaHNDZ1lFQWhhcDhLYityOHpyb08ya1dvVkdzQ0RUc3VDV0xtbmthZm90OE5MNjVscGRtRWpIa3Npa2EKa094VkdmRW9FVUgwZmViRjJ5c25LaEM3T2lpSk56NEdQZUdVdVBkOS9kZERlM0M2RVdieFU5Rk1XbUx2RUNVaAo5RXVjQVc3QU9yOUgrcWFxUCtEUTRCL3FwUHRhZ2hDTGxZaWtYVktoLy8rL25ibHhoWWQ5dmVJPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let { authorization } = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
