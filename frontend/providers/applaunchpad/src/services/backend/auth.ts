import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';
import { Base64 } from 'js-base64';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getLocalAdminKubeConfig = () => {
  const config: string | undefined = process.env.ADMINTOKEN;
  console.log('base64 config:', config);
  if (!config) {
    throw new Error('KUBECONFIG environment variable is not defined');
  }
  console.log('config:', Base64.decode(config));
  return Base64.decode(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJMU1ESXlNREF5TWpnd09Gb1lEekl4TWpVd01USTNNREl5T0RBNFdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnMvZ3d2QUQyd1dETVBZeDJ5L1JqY2JTT0Q1amZlb2FiNDVLaFBxVjhMZVZwdkxaT3RtaTkwcnZXbDhRbVAzTXkKd01BeVIzWTM5VjBjd1hmak1VOEIxNis1dU9sV0JCNlpZekZDUEF0TFM1ZDd6TUFwUE1aT2ZQY2xxOVVYRjZHNAo5NURsWmdVVjlwVExDUGVmRkFNdXV6Nnp4bDF6bFZyQ1hiYW5qRjhOM0RRNUlmL2xpcUZqWG5scGIzNE1uaE12Ck5yd1NFblZYb3Z4NjRvZ2JkM0I3V1FYa2U0Vnp0K0ZJMjZ3MlVIT1FLYmh2b3dTSFBEOEMrbzE4QmRsUmRWOVIKeXIwLzhJeHZZK0RvVGNoRFRKb25NUUMzaEpmbUVpVFA1Y2wxcjQ0T1VtTTN3ZktjZjVMRHRHN2lGazY5bmxuZgpOS24xT1o3eVplRktEYmFSRERzT3p3SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVSREljeW9zdmMxWHlOMVVpMHloSVI5cVRWUW93RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFITUVZdFJaclZ0UnluNkFSVzJveEZkeVRwZFlQa1puZHNNVXJXZllPbHpRN1FFTwpvbER4VkpoQW1OOHdmOU5RVW9hYkw4dnRHRzB5bEZWSnV0MWQ4eGJCOGpBT2hZSTh5akhjbjU4Vk81TFZ0Z1hVCnJBVTNMald5a2NQV01YZXdKWDBxSXJpUWR2SG04dVVYZlpUaHhWYkNUV3NtWjlnbXJrRDNWbzdzNnRONUx3d3gKRGZHZFlXNzZLaUJXWVpHNCtzTnhjV0pISm1Jd1NQNS9uYVBZVlJxeWJPbm93VFFrWW5qdWlMb0NCM2k3L1FYUQpTdWQydmIwclIxclZpbzJ6Z0huRlE5ZzVBTzZNVkxSamozYU9mcTVLQ0tuOFNBTys0T0hWcjYrNXVnWksvL3RtCnRiblNlY09mODRLV0pzYmM1dWNBREJySzNhZUY1OElzSFNlTU9Ndz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://172.20.22.234:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
- name: kubernetes-admin
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJYzdRMEFOV1NMeTR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRBeU1qQXdNakk0TURoYUdBOHlNVEkxTURFeU56QXlNamd4TWxvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzRZdHNYMzRacjhtOC8KaFNmYXYzdUtjUWZaN2kzcHYveGkxNnlESFVjOGh4dElsVjlqYVNtZmNUUUZJa05wT2h6Vi9jZVhyN1duVGhZNgpBYUpWNHZZVVhlTndqOHNRT2Z3VDEzb2tVV3d6L3JWUzN0K3BTa1Q3WUZFaW44K1ZHbU53ZFdTY3ZMK3lzWCs1ClJxZklnbG9tZHhaZkl1LzQ4TGVHNnpwNWlmUmtRU0NHNUsyQk5YZ2todFk3NVhCVW90bUt5UWpjVHNpSDNBQUkKU2JNakM2T3VaMVZWcXJTUlY0VUh2VFZhcENRQnZEMUtqc2dGQ3RLRDdLMTlsSzhEczRHU2g2QWhHazk2am1kaApDTUJ4akpWT3ZPWUl6VnlHaTdoMTdzOGVwYzQrejU5VkgwcGlFZHcyRUZiTGFlM3k5QlBaRzFLUnlvSExpVGo5Cm15YXduU2NOQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlJFTWh6S2l5OXpWZkkzVlNMVEtFaEgycE5WQ2pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFFUG9SaVFqWFdzN01NS3lsaG5pcDRyTThjWHJEYzBjNGo5cmZWK0xTdlBpNXRIZ05aQlBFCkltVGtoeDJoY3VFWE5vcjJpSWIwZFF6Mis3ckhOU3NiVUhLUTBsNjFieS9zclZROVk2WnhTN0pzT3V2WnhzSVgKSEdYY0J3RmV5VGw1bDFURmhRSk9tRTN0enVkWWFxenI4NzNuZEVBVGJSdHRveHVxSElXazJScmxjbzFVUmpoTAo2ZEpSVDVQSzRSb2xXRnpQMVI1OEJZVTZJZ2dUbzRTbXVzbkQ5Q2kzVzVzM1l3bThSbkVQZWVkTE82UmpReU5CCjUycWhLRzVlUUFtRm1WMzR0b2dtRWVVaHZDbnB6cnF6REFVR0NGOU5mL2cxTUZhRE5OMlpJdVhMcUQ0SVY5ZXYKVFpJRE92dDFWVXpjdVUya3Z3b1h3Q01mYmpIK1dpcDhJdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdUdMYkY5K0dhL0p2UDRVbjJyOTdpbkVIMmU0dDZiLzhZdGVzZ3gxSFBJY2JTSlZmClkya3BuM0UwQlNKRGFUb2MxZjNIbDYrMXAwNFdPZ0dpVmVMMkZGM2pjSS9MRURuOEU5ZDZKRkZzTS82MVV0N2YKcVVwRSsyQlJJcC9QbFJwamNIVmtuTHkvc3JGL3VVYW55SUphSm5jV1h5THYrUEMzaHVzNmVZbjBaRUVnaHVTdApnVFY0SkliV08rVndWS0xaaXNrSTNFN0loOXdBQ0Vtekl3dWpybWRWVmFxMGtWZUZCNzAxV3FRa0FidzlTbzdJCkJRclNnK3l0ZlpTdkE3T0Jrb2VnSVJwUGVvNW5ZUWpBY1l5VlRyem1DTTFjaG91NGRlN1BIcVhPUHMrZlZSOUsKWWhIY05oQld5Mm50OHZRVDJSdFNrY3FCeTRrNC9ac21zSjBuRFFJREFRQUJBb0lCQVFDZmMwMklMWkp2RXkzRgpQbjhpbWVoWjVqa2w2dVRsZVZMbW54L2VHcG1aN0RSWjVtS2c4elk5WFlYZzBxcDgrdllvejlla2d4eVIyK000CnNtVVI1TDF0QzJ3OTBQdUh3cjBNNDVBS2pDY0lKOEhpTWo0MGhiZDFzdXMzQ0FCWkxvTERvNkVvTWNtTTNCWloKd0pJandTWDRrWTlWSWo5bmhiTVFCNmQvcHg4aStmOFY1eFEvMkd6Y0UyWEZGRWJMQUErN0l4UVVsMWFVSzRDbgpHYlFodzdMQTJmQnlWMkRDYVg5NnpGZTJoOWdNc09jUG9SbXd1dTh5Y1ZnY1UxUU9WMFliUDJpZ0tNYVhqb09nCklGNmlLK2wzMXBZcjBuR0ZGR2tQRTlkU3RxNU9nRGFIQ2tORjdYNnBYVGszdDlML0VmQjk4dGE0MWFlOWwvNHQKQUEwbFk5OTVBb0dCQU5LWGI0am04WTNGTmg5cDA5d2lneVF1NjJ6SHRxWFRVWUl6Wk1QZEdrM2tFaEJtR3pKNwp0YTU5ODZCUUE3UTBrdlNnaHZzekZ1NVFNWUEvcm1HcHlIRjMyUHNrVmRReElEbXB1dTUvTnpZNHpFaHo0QXVmCk1wT0VOZ1NRNmlDZk1uR1FDanBZL21iS1UwNGxOQzVFQ09rS24rNk1FR0V4WGJYS3VKMjJGcGg3QW9HQkFPQWsKNU1rMzN5Q3NsNDk1alZhRG1VbFFlRkJHenY2WkdwNUZPMlVMWW1CMUNlMkhnKzR5WXZxbGMyS2kzTjBGaFZlNwpEeDdzU3h0d2hQT1BkbFRjTHkyZHlhRkd1NHNmUmF4YWZ4YTY0U3JIZk1DN1QydXFPVURUYXRWOTBLSDl3Wm1JClFzOWVTcHYrSUwya3lYSEhLWGZ3d0Y5TWl6cUdSeTBRSEkwek9Cd1hBb0dBUWRkSzdkaVdxU2FCZDJ6VTZqeDQKRi9YN2NUVTNxN3pYL1Fjb2QveEczeGR4ZG1NV0djQ0gyeGhSOVV0Ty9TWjYwN1RrdnVFSVNGWVdRK3lsRHEvUQpsWGxOQTZnbWxZTU9lampRMHdRL05OcXBNL1hXbEl1ZmVuT1psKy9lNDNnaWcxTHZmN0tYUjNmMmQ3WTJERWtGCktDZEVQWWJaRUNvcERFOW5UUmZERk1VQ2dZQWFSRGlMWEFESjAyL3ZZRTh2MUR3aVcwdStISTRsUjh2V3dFWTEKa1IvMkxjRDhGT1ZoQklhVTJNNnN3R2toZllRaXc4a0IxcTcyaURrTVVjT01Ma0ZaRnlTSndjQTRqWEdjd1A0agpxOEszUUtsZDdKVmlDSkN0Q0JsODYwR0h1alQxeVFJTFN3RnpSbFNQNUwrMmxhQkdiZkFkT3RzV0FLWldvWXkyCi8wbVVBUUtCZ1FDV0Vwb2JnZjRONnRlUzdzK2xCN3NGK0NrenhpbEpxbzNBN3VGTjVVNzU3TmtSUlliUVVQSmoKVkwzMnhkWW5xYitJTXgyNEl4dmx3aU9ESUtMbXRFQ0s4MllhYTdRVlRqMVh3U0Q0YncyNHY1Wi9WaVRweDk3MQpqT1BiSmpNN0hlLzRaY0VFNE12QUJuaVdQbnBLaE5GUEtrQmdiTTBsK25kZjVZbGZoNTJtUFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let { authorization } = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
