import { IncomingHttpHeaders } from 'http';
import { KubeConfig, CoreV1Api } from '@kubernetes/client-node';
import yaml from 'js-yaml';
import { Base64 } from 'js-base64';

export const getUserKubeConfig = () => {
  const kc = new KubeConfig();
  kc.loadFromCluster();
  const config = kc.exportConfig();
  return yaml.load(config);
};

export const getLocalAdminKubeConfig = () => {
  const config: string | undefined = process.env.ADMINTOKEN;
  // console.log('base64 config:', config);
  if (!config) {
    throw new Error('KUBECONFIG environment variable is not defined');
  }
  // console.log('config:', Base64.decode(config));
  return Base64.decode(config);
};

export const getUserKubeConfigMock = () => {
  const temp = `apiVersion: v1
clusters:
  - cluster:
      certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2VENDQWRHZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQ0FYRFRJME1USXlOVEEzTURRek5Gb1lEekl4TWpReE1qQXhNRGN3TkRNMFdqQVZNUk13RVFZRApWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCnNxZEdTMERpbHBDS3lsbzdSM3dSQitidVp5SjFUSkpPaUtYWmN2TituOWpoSXExZExUWTlKRnBBb3BhT1l6QUwKVDA3VE1XdlNrLy9QU2hVZTNYaExpTmRWeU85TUM1QU5tOUxRdUdjNFp3SGZOS21xVThsUE1GUEZ0N3Y5T05YYgp6bzNUNGQ3VjVac2xKK1Q5OThhWmJVL1JvMUJRVU8ySXdiYTdPUkxQYTBydGFLRmpWdWkwRnVyMWJvKzBGL05PCjJWNzhTdU9IemxlbklzT0JrMVJTTkdFd2RkRU9IdTZOdFFueXN3OWZBWE14aWJyYWpBWm1jdHhOV2h5dCtKSmYKdllVNGFqMStFRVhxSnJSSGRyaWRtcVcrbDRQSlRMTDhBQVpOUWNBWExPdm50clduVllqR05Rd1RjUnZOQlBnTgpFOVN1TTBPUHJESGw4UlU0Yy9Qak13SURBUUFCbzBJd1FEQU9CZ05WSFE4QkFmOEVCQU1DQXFRd0R3WURWUjBUCkFRSC9CQVV3QXdFQi96QWRCZ05WSFE0RUZnUVVpNSt1bWVwTGFKNTgvZ3dhZkplaWNzZnRlMTh3RFFZSktvWkkKaHZjTkFRRUxCUUFEZ2dFQkFDY3lZWWFxRFdDNnpueEYveHNIckF2dTdvK1h5Q05rbFpjcHRTeEpuZys4bldFVQpFL1JFbFEzQ05zaEF1U1NSSnQzbUJMVXdMTDZTVk1TZjNPWnFXM1h4SVV4aC9XVXgxRHpQbGtjczJISnJ3TE9iCk5aaVd5RUN3QnVQSE5KSkZWNlErWCszR0habFpMb29Ickh0ZFh0WnBYVy9EYmVMWW9ucEFMUVJRUFd2b3h2RFcKREhXUnBhTXBzS0Z0L2VvM2M2YVpTL2lpcGgvcldCQjJ1NnlZb3RXU3ZRancybERQdXZwWllHMXFSOGNQL0hVUApRenhxQmlnVXYxaTJTTURhS0JKSkl1bWpGY0xFeWl1VVdPZFVDQno4MVhxMThnV3pUNDd5cHg4NlU2MzFoZE5uCjhDSGR0dEh4b1NuOWJvTGNaYjFnTm1ESnJLT1ZVRUlpdXdocWVWST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
      server: https://192.168.0.134:6443
    name: kubernetes
contexts:
  - context:
      cluster: kubernetes
      user: kubernetes-admin
    name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
  - name: kubernetes-admin
    user:
      client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lJQUtBRXJZSzBNbGt3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TkRFeU1qVXdOekEwTXpSYUdBOHlNVEkwTVRJd01UQTNNRFF6TjFvdwpOREVYTUJVR0ExVUVDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhHVEFYQmdOVkJBTVRFR3QxWW1WeWJtVjBaWE10CllXUnRhVzR3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3V6T1Ywb3h0aU1QV2MKVG9xckRlaXFDQUpZSXNUMUovcUhDZGorRU9sRHE4R2xmWk5Xbk15elpiTjM3OVU0SStPamwzcFZPZ2dsaUZzawp3WVpUYS9RYXBIeGRQeHRVL2FQaG9yNU9wVktLTFg0TW5zVEg3QWV4TC82cHVDekRoWks5RG1hZ2YwcHArUFZSCmJVdG9od1dTd0NLQjdHYjBqWm5tOHI1d2x0bC9MdnFzTDhwWkFvNFgrdGpHMVV5QVdHZHVHd1hhSkcrWGRKeWUKVWJRQ0lGWmlYVjNuaUxUdHVWdHpoR2lOWk1CSzJLNnJHNGFyVGp3UktLSkxZaG44RXhlTzgzcExhSy9UTlc2dgpNNU5hZE02WmxwYmRmS29ESE5WM202dzlSakcvVVpmRkxaODVWeHF2UGxJOVUzV0ptdUoramZWWXRXVHA2OC9KCjJXTW9zZjNWQWdNQkFBR2pTREJHTUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQWZCZ05WSFNNRUdEQVdnQlNMbjY2WjZrdG9ubnorREJwOGw2Snl4KzE3WHpBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjYjNOUlBQdUdDdFlPQnpzMWI1TnRoZ0dwYkVwYVljdmplcU9CTzdic0lLNHNwajdSK2ZjCmwwdVlhRjhLWTVid1BKbGY4NEYrUGVHdlZxQ3NLcysyOHozc05wN24rQkJTOW5jL0Jmb25aVUc1Q2JIY3laRFkKTFFyVUgyOTJhY3lYRlFhZ3F5VXpMZHRuMTZZaEVqeFdDam9xeXg2NDh4d2VzRDZKRzV5clY0Y2liTnVuNVJITgpOVkdzWGE1MTNudldXQTllZE9iUGxZSmU0OTErWU14RGt0bGV0THU4YVltdm9yREhxVndVZzVacEI2MXJEMXJ6CmZTbno0bHloeSs5ZHdwMmJRdkpDb29iZCtNK1lyYVJvV0VvMVVwcDQwV24yaWJhcml4NFB5VzdXTlU5WTZhTkIKVzRqdEl3TWk5Z0V1YjdtWk52NGNFa3FJdXprNE8wTHRLZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcnN6bGRLTWJZakQxbkU2S3F3M29xZ2dDV0NMRTlTZjZod25ZL2hEcFE2dkJwWDJUClZwek1zMld6ZCsvVk9DUGpvNWQ2VlRvSUpZaGJKTUdHVTJ2MEdxUjhYVDhiVlAyajRhSytUcVZTaWkxK0RKN0UKeCt3SHNTLytxYmdzdzRXU3ZRNW1vSDlLYWZqMVVXMUxhSWNGa3NBaWdleG05STJaNXZLK2NKYlpmeTc2ckMvSwpXUUtPRi9yWXh0Vk1nRmhuYmhzRjJpUnZsM1NjbmxHMEFpQldZbDFkNTRpMDdibGJjNFJvaldUQVN0aXVxeHVHCnEwNDhFU2lpUzJJWi9CTVhqdk42UzJpdjB6VnVyek9UV25UT21aYVczWHlxQXh6VmQ1dXNQVVl4djFHWHhTMmYKT1ZjYXJ6NVNQVk4xaVpyaWZvMzFXTFZrNmV2UHlkbGpLTEg5MVFJREFRQUJBb0lCQUhvQmU1cDRpaEYwR01wNwpxNkFPK2psTGs4OU9uV2g3K2dvdEhtN2ZBT0dCell5ajVLWU1sWGdWNFRreWhnRkVVNHdJbTVOSENRNmhhUFJ6CnV6MFkyVzJMSjE2eVFIS0hBczdubDZzdkN6aDAza2tTdkVqS2Z1ZjJsdXFCS1lWakF2UEFUSE56eFUzSVBmb1MKcmhLTVE2Q1ZTTUNrYjR2OEZkS3oxYWFpTTdibnZOVTNOTHdsZWRkZ01WTVh1OHlPOFc3RnRxU0Yrd3o0Mk4wbQo5bHRTSzhjcHZFSUZGb0J5TmxRMjJ2c1RvQ1VTSytNdlhIZmtHZ3JhTVMxenVGNW1VUERmZWRqWDJiMHpmZE9RCnFQaU9Fa2NJaU1ueDhHUUtIMWdpOUNaYmNXSlRQZzljNG1KeTZjZGNhYy8wQktyUVY0SUdZbjlWanlOYjkzVkMKc1pCc2FCVUNnWUVBeVRPa00rcEViUmttRFE1SDZEaGRlenNWNGI5Y2xDZld1WXlyclFJbVZyUUxrVFRQTXAxMQphb0dMWTNTQ2EzTjJWMFdqelFLTkF1RjNkdjh1ZnZJZ0RTbUhqeEtiMG1OTk1UT0haZkNTa0F2ZDdMMXUvUUl3CkRSMnJjV3FLTTNDV3dhWGozYXA2bmgwc2VZOWYzay9oVUN5VktVTWtCajZZaVRmbmo2UFVTb3NDZ1lFQTNtaDYKUC8rZUlrUkVRYzRkZ0hhanRuSlg3dUFINlV4N2l0TFZwb3hxMmUrMktpTnZsK1ZzckhWcEptV01CV3hmT3QvcQoyTXZ2eXNkelhJUGdRS2thbmZhV0lRd05iYW55Y1VGLy91bEZUWlhOd01zOEVDeG1zYjExZ2lwWmZ5Z2R2YTNSCjEzU0tFazJSVW5sSFFxSzBKWkttcW5aTzhVWjBJNldTRnBIZ3hSOENnWUFNeXZyS3pqOXhqR0xOKzdWNHYzUzYKTENTVkNQelM4c0dGWkx0WnNjUk1TUUJmU0ROUWJaQ1VxQTM3MGVHbEFWOXA1eVNtR1Y1cjYzZ1VHZCtUOU1NeQo4d3dLZmMxb2tDWE5WaEJxMitRRndxdG1yUmpNZjRJY28yRk9RYzd0dkYvcGlpbTE0MndPZDU1blVFVnhOalVHClN2OWs4ejdzSXJqQ0tNclJhRUpNUndLQmdFL3FvTXJ3VWVVa1BKYWN0cE1iamxZWG5pc3lpd1UwdTB1MTJKbUEKNlVBb1YzK3F2Z1dKcGRRT1dGczRyK2llK1ZVUmNyUzJDeE1GT2htck5XQm1veTdSbFQ2SXN5YU5vNVU0b1FKNgoxYkU4Ty9PajA1QklOQnAzNW9xQUp5cCt3cmtPaFZGekNjM3IyMlVVT1J2amxQSFBVVjM5SnY2aGYwZnp6WnVZCmpYaW5Bb0dBVjFIeUlHZWoxUXlPR1RlcVZYc2xkZXBuN2pVYUhBbXB2TDRydXpqK2lBMlFDTjQ2QjZYa2llQW4KZDF1RHdWYUNHb1JzK3YyYW04OG9Oa0t2amNjUVVzQ2RyUUpSL2FtUlBVRGtSWVNYOTRRT00ySTR1a1lFcGVrUwpoT2l2enRaeW40THErMmh5UTJSUXlkK2d4ZVkxTmdDNEI2a3M5ZGpNTkw2cmdSQXl6WVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==`;
  return yaml.load(temp);
};

export const authSession = async (header: IncomingHttpHeaders) => {
  if (!header) return Promise.reject('unAuthorization');
  // console.log('header:', header);
  let { authorization } = header;
  if (!authorization) return Promise.reject('unAuthorization');

  try {
    const kubeConfig = decodeURIComponent(authorization);
    return Promise.resolve(kubeConfig);
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};

export const getAdminAuthorization = async (header: IncomingHttpHeaders) => {
  const kubeConfig =
    process.env.NODE_ENV === 'development' ? getUserKubeConfigMock() : getUserKubeConfig();
  try {
    return Promise.resolve(JSON.stringify(kubeConfig));
  } catch (err) {
    return Promise.reject('unAuthorization');
  }
};
