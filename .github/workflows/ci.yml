name: CI

env:
  # Common versions
  GO_VERSION: "1.19"

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.yaml"
  pull_request:
    branches: [ "*" ]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.yaml"

jobs:
  check-license:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check License
        run: make verify-license

  resolve-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Resolve Modules
        id: set-matrix
        run: sh ./scripts/resolve-modules.sh

  golangci-lint:
    needs: [ check-license, resolve-modules ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.resolve-modules.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ matrix.workdir }}
          args: "--out-${NO_FUTURE}format colored-line-number"

  coverage:
    needs: [ check-license ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Coverage
        run: make coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3

  build:
    needs: [ golangci-lint, coverage ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [ sealos, sealctl, lvscare, image-cri-shim ]
        arch: [ arm64, amd64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Dependencies
        if: ${{ matrix.binary == 'sealos' && matrix.arch == 'arm64' }}
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make build BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Compress Binaries
        run: |
          make compress BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Save Binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}-${{ matrix.arch }}
          path: bin/linux_${{ matrix.arch}}/${{ matrix.binary }}

  docker:
    needs: [ build ]
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Expose git commit data
        uses: rlespinasse/git-commit-data-action@v1

      - name: Download lvscare
        uses: actions/download-artifact@v3
        with:
          name: lvscare-${{ matrix.arch }}
          path: docker/lvscare

      - name: Download sealctl
        uses: actions/download-artifact@v3
        with:
          name: sealctl-${{ matrix.arch }}
          path: docker/patch

      - name: Download image-cri-shim
        uses: actions/download-artifact@v3
        with:
          name: image-cri-shim-${{ matrix.arch }}
          path: docker/patch

      - name: Download sealos
        uses: actions/download-artifact@v3
        with:
          name: sealos-${{ matrix.arch }}
          path: docker/sealos

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Chmod a+x for docker
        run: |
          chmod a+x docker/sealos/*
          chmod a+x docker/patch/*
          chmod a+x docker/lvscare/*

      - name: Build and Push lvscare Image
        uses: docker/build-push-action@v3
        with:
          context: docker/lvscare
          file: docker/lvscare/Dockerfile
          push: true
          tags: localhost:5000/labring/lvscare:${{ env.GIT_COMMIT_SHORT_SHA }}-${{ matrix.arch }}

      - name: Build and Save Cluster Images
        run: scripts/save-cluster-images.sh
        env:
          ARCH: ${{ matrix.arch }}

      - name: Upload Cluster Images
        uses: actions/upload-artifact@v3
        with:
          name: patch-image-${{ matrix.arch }}.tar
          path: patch-${{ matrix.arch }}.tar

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            lvscare-${{ matrix.arch }}
            sealctl-${{ matrix.arch }}
            image-cri-shim-${{ matrix.arch }}
          failOnError: false
