name: CI

env:
  # Common versions
  GO_VERSION: "1.17"

on:
  push:
    branches: main
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.yml"
  pull_request:
    branches: ["*"]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.yml"

jobs:
  check-license:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Check License
        run: make verify-license

  resolve-modules:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Resolve Modules
        id: set-matrix
        run: sh ./scripts/resolve-modules.sh

  golangci-lint:
    needs: [check-license, resolve-modules]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.resolve-modules.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.46.2
          working-directory: ${{ matrix.workdir }}
          args: "--out-${NO_FUTURE}format colored-line-number"

  coverage:
    needs: [check-license]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Install Dependencies
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev
      - name: Run Coverage
        run: make coverage
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3

  build:
    needs: [golangci-lint, coverage]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary: [sealos, sealctl, lvscare, image-cri-shim]
        arch: [arm64, amd64]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Dependencies
        if: ${{ matrix.binary == 'sealos' && matrix.arch == 'arm64' }}
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make build BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Compress Binaries
        run: |
          make compress BINS=${{ matrix.binary }} PLATFORM=linux_${{ matrix.arch }}

      - name: Save binaries
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.binary }}-${{ matrix.arch }}
          path: bin/linux_${{ matrix.arch}}/${{ matrix.binary }}
