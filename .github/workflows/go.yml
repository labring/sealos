name: CI

env:
  # Common versions
  GO_VERSION: "1.17"

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
    paths-ignore:
      - "docs/**"
      - "vendor/**"
      - "*.md"
      - "*.yml"
jobs:
  check-license:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run Check License
        run: make verify-license
  golangci-lint:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install libgpg-dev
        run: sudo apt-get install -y libgpgme-dev libdevmapper-dev

      - name: Run Linter
        run: make lint

  build-binaries:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build in Docker
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: false
          load: true
          tags: sealos:latest
          build-args: ACTION=release-build

      - name: Copy Out Binaries
        run: |
          docker run -itd --name sealos --rm sealos:latest bash
          docker cp sealos:/work/dist  .

      - name: Save build sealos binaries linux-amd64
        uses: actions/upload-artifact@v2
        with:
          name: sealos-amd64
          path: dist/sealos-amd64_linux_amd64/sealos

      - name: Save build sealos binaries linux-arm64
        uses: actions/upload-artifact@v2
        with:
          name: sealos-arm64
          path: dist/sealos-arm64_linux_arm64/sealos

      - name: Save build binaries linux-amd64 sealctl
        uses: actions/upload-artifact@v2
        with:
          name: sealctl-amd64
          path: dist/sealctl_linux_amd64/sealctl

      - name: Save build binaries linux-arm64 sealctl
        uses: actions/upload-artifact@v2
        with:
          name: sealctl-arm64
          path: dist/sealctl_linux_arm64/sealctl
  test-coverage:
    runs-on: ubuntu-latest
    name: Test Coverage
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          submodules: true
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: Install Dependencies
      run: |
        sudo apt-get install -y libgpgme-dev libdevmapper-dev
        go install github.com/jstemmer/go-junit-report/v2@latest
        go install github.com/t-yuki/gocover-cobertura
    - name: Run Test
      run: go test -coverprofile=coverage.txt -covermode count `go list ./... | grep -v tests` -v 2>&1 | tee test_output.txt
    - name: Generate Coverage
      run: gocover-cobertura < coverage.txt > coverage.cobertura.xml

    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.2.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '50 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
