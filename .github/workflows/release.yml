name: Release

env:
  # Common versions
  GO_VERSION: "1.17"

on:
  workflow_dispatch:

  push:
    tags:
      - "*"

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Prepare
        id: prepare
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo ::set-output name=tag_name::${TAG}

      - name: Note
        id: Note
        env:
          VERSION: ${{ steps.prepare.outputs.tag_name }}
          BUCKETNAME: ${{ secrets.BUCKETNAME }}
          OSSENDPOINT: ${{ secrets.OSSENDPOINT }}
        run: |
          cd scripts/release && sh note.sh

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build in Docker
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: false
      #     load: true
      #     tags: sealos:latest
      #     build-args: |
      #       ACTION=release
      #       GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
      #     secrets: GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
      # https://github.com/docker/build-push-action

      - name: Setup MultiArch Apt
        run: |
          sudo \cp .github/sources.list /etc/apt/sources.list
          sudo dpkg --add-architecture arm64
          sudo apt update || true

      - name: Install Dependencies
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu upx \
            libbtrfs-dev libgpgme-dev libdevmapper-dev \
            libbtrfs-dev:arm64 libgpgme-dev:arm64 libdevmapper-dev:arm64 || true
          sudo apt install -f

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          args: release --rm-dist --release-notes=scripts/release/Note.md
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # - name: Copy Out Binaries
      #   run: |
      #     docker run -itd --name sealos --rm sealos:latest bash
      #     docker cp sealos:/work/dist  .

      # - name: Build binaries to oss
      #   env:
      #     BUCKETNAME: ${{ secrets.BUCKETNAME }}
      #   run: |
      #     echo ${{ secrets.OSS_CONFIG }} |base64 --decode >> .ossutilconfig
      #     wget http://gosspublic.alicdn.com/ossutil/1.6.19/ossutil64  && chmod 755 ossutil64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealos-amd64_linux_amd64/sealos oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/${{ steps.prepare.outputs.tag_name }}/sealos-amd64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealos-arm64_linux_arm64/sealos oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/${{ steps.prepare.outputs.tag_name }}/sealos-arm64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealos-amd64_linux_amd64/sealos oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/latest/sealos-amd64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealos-arm64_linux_arm64/sealos oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/latest/sealos-arm64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealctl_linux_amd64/sealctl oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/${{ steps.prepare.outputs.tag_name }}/sealctl-amd64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealctl_linux_arm64/sealctl oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/${{ steps.prepare.outputs.tag_name }}/sealctl-arm64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealctl_linux_amd64/sealctl oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/latest/sealctl-amd64
      #     ./ossutil64 -c .ossutilconfig cp -f dist/sealctl_linux_arm64/sealctl oss://${BUCKETNAME:-sealyun-home}/sealos-4.0/latest/sealctl-arm64
