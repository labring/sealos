apiVersion: v1
kind: Namespace
metadata:
  name: docker-registry-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: docker-registry
  name: docker-registry-config
  namespace: docker-registry-system
data:
  config.yml: |
    version: 0.1
    log:
      accesslog:
        disabled: true
      level: debug
      formatter: json
      fields:
        service: registry
        environment: staging
    storage:
      oss: # TODO edit it
        accesskeyid: ...
        accesskeysecret: ... 
        region: ... 
        bucket: ... 
      delete:
        enabled: true
      cache:
        blobdescriptor: inmemory
    middleware: 
      storage: # TODO edit it
        - name: alicdn
          options:
            baseurl: ...
            authtype: ...
            privatekey: ...
    auth:
      token: # TODO DON'T edit it if  
        realm: https://hubauth.login.sealos.io/auth
        service: token-service
        issuer: registry-token-issuer
        rootcertbundle: /etc/docker/registry/authserver.crt
    http:
      addr: :5000
      secret: ... # TODO edit it,  If you are building a cluster of registries behind a load balancer, 
                  # you MUST ensure the secret is the same for all registries.
      headers:
        X-Content-Type-Options: [nosniff]
      http2:
        disabled: false
    health:
      storagedriver:
        enabled: true
        interval: 10s
    threshold: 3
  authserver.crt: | 
    -----BEGIN CERTIFICATE-----
    ...
    -----END CERTIFICATE-----
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: docker-registry
  name: docker-registry
  namespace: docker-registry-system
spec:
  replicas: 2
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: docker-registry
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
      securityContext:
        runAsUser: 0
      containers:
        - name: docker-registry # nosemgrep
          image: ghcr.dockerproxy.com/labring/registry:main
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
              name: web
              protocol: TCP
          resources:
            requests:
              memory: "2048Mi"
              cpu: "1500m"
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/docker/registry
              name: docker-registry-config
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - docker-registry
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 100
      volumes:
        - name: docker-registry-config
          configMap:
            name: docker-registry-config
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry-service
  namespace: docker-registry-system
spec:
  ports:
    - name: port-name
      port: 5000
      protocol: TCP
      targetPort: 5000
  selector:
    app: docker-registry
  sessionAffinity: ClientIP