package request

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"main/api"
	"net"
	"net/http"
	"net/url"
	"os"
	"strings"

	// "github.com/mitchellh/mapstructure"
)

func Request(addr string, params *bytes.Buffer) ([]byte, error) {
	resp, err := http.Post(addr, "application/x-www-form-urlencoded", params)

	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode < 200 || resp.StatusCode >= 300 {
		log.Printf("%v\n", resp)
		return nil, fmt.Errorf("prometheus server: %s", resp.Status)
	}

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return body, nil
}
func Prometheus(query *api.PromRequest) ([]byte, error) {
	result := strings.ReplaceAll(query.Query, "$", "namespace=~\""+query.NS+"\"")
	result = strings.ReplaceAll(result, "{", "{namespace=~\""+query.NS+"\",")
	log.Println(result)

	formData := url.Values{}
	formData.Set("query", result)
	if query.Range.Start != "" {
		formData.Set("start", query.Range.Start)
		formData.Set("end", query.Range.End)
		formData.Set("step", query.Range.Step)
	} else if query.Range.Time != "" {
		formData.Set("time", query.Range.Time)
	}
	bf := bytes.NewBufferString(formData.Encode())

	prometheusHost := GetPromServerFromEnv()

	if prometheusHost == "" {
		return nil, api.ErrNoPromHost
	}

	log.Println(bf)

	if len(formData.Get("start")) == 0 {
		return Request(prometheusHost+"/api/v1/query", bf)
	} else {
		return Request(prometheusHost+"/api/v1/query_range", bf)
	}
}


func get_query_from_file(query *api.PromRequest) (string, error) {

    mysql := map[string]string {
        "cpu": "round(max by (pod) (rate(container_cpu_usage_seconds_total{namespace=~\"$\",pod=~\"@-mysql-\\\\d\" }[5m])) / on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-mysql-\\\\d\", resource=\"cpu\"})) * 100,0.01)",
        "memory": "round(max by (pod)(container_memory_usage_bytes{namespace=~\"$\",pod=~\"@-mysql-\\\\d\" })/ on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-mysql-\\\\d\", resource=\"memory\"})) * 100,0.01)",
        "disk_capacity": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_capacity_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-mysql-\\\\d\"}))",
        "disk_used": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_used_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-mysql-\\\\d\"}))",
        "uptime": "sum(mysql_global_status_uptime{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}) by (namespace,app_kubernetes_io_instance,pod)",
        "connections": "sum(max_over_time(mysql_global_status_threads_connected{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (namespace,app_kubernetes_io_instance,pod)",

        "commands": "topk(5, rate(mysql_global_status_commands_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m]) > 0)",

        "aborted_conenctions": "sum(rate(mysql_global_status_aborted_connects{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (namespace,app_kubernetes_io_instance,pod)",
        "innodb": "sum(mysql_global_variables_innodb_buffer_pool_size{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}) by (namespace,app_kubernetes_io_instance,pod)",
        "table_locks": "sum(rate(mysql_global_status_table_locks_immediate{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (namespace,app_kubernetes_io_instance,pod)",
        "slow_queries": "sum(rate(mysql_global_status_slow_queries{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (namespace,app_kubernetes_io_instance,pod)",
    }
    pgsql := map[string]string {
        "cpu": "round(max by (pod) (rate(container_cpu_usage_seconds_total{namespace=~\"$\",pod=~\"@-postgresql-\\\\d\" }[5m])) / on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-postgresql-\\\\d\", resource=\"cpu\"})) * 100,0.01)",
        "memory": "round(max by (pod)(container_memory_usage_bytes{namespace=~\"$\",pod=~\"@-postgresql-\\\\d\" })/ on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-postgresql-\\\\d\", resource=\"memory\"})) * 100,0.01)",
        "disk_capacity": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_capacity_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-postgresql-\\\\d\"}))",
        "disk_used": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_used_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-postgresql-\\\\d\"}))",
        "uptime": "avg (time() - pg_postmaster_start_time_seconds{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}) by(namespace, app_kubernetes_io_instance, pod)",
        "connections": "pg_stat_database_numbackends{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}",

        "db_size": "pg_database_size_bytes{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}",
        "commands": "rate(pg_stat_database_xact_commit{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",

        "active_connections": " pg_stat_activity_count{namespace=~\"$\", app_kubernetes_io_instance=~\"@\",state=\"active\"}",
        "rollbacks": "rate(pg_stat_database_xact_rollback{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",
        "trans_duration": "max without(state) (max_over_time(pg_stat_activity_max_tx_duration{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m]))",
        "block_read_time": "rate(pg_stat_database_blk_read_time{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",
        "block_write_time": "rate(pg_stat_database_blk_write_time{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",
    }

    mongo := map[string]string {
        "cpu": "round(max by (pod) (rate(container_cpu_usage_seconds_total{namespace=~\"$\",pod=~\"@-mongodb-\\\\d\" }[5m])) / on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-mongodb-\\\\d\", resource=\"cpu\"})) * 100,0.01)",
        "memory": "round(max by (pod)(container_memory_usage_bytes{namespace=~\"$\",pod=~\"@-mongodb-\\\\d\" })/ on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-mongodb-\\\\d\", resource=\"memory\"})) * 100,0.01)",
        "disk_capacity": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_capacity_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-mongodb-\\\\d\"}))",
        "disk_used": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_used_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-mongodb-\\\\d\"}))",
        "uptime": "sum by(namespace, app_kubernetes_io_instance, pod) (mongodb_instance_uptime_seconds{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"})",
        "connections": "mongodb_connections{namespace=~\"$\", app_kubernetes_io_instance=~\"@\", state=~\"(current|availabe)\"}",

        "commands": "rate(mongodb_op_counters_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\", type!=\"command\"}[1m])  or irate(mongodb_op_counters_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\", type!=\"command\"}[1m])",

        "db_size": "mongodb_dbstats_dataSize{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}",
        "pg_faults": "rate(mongodb_extra_info_page_faults_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m]) or irate(mongodb_extra_info_page_faults_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",
    }

    redis := map[string]string {
        "cpu": "round(max by (pod) (rate(container_cpu_usage_seconds_total{namespace=~\"$\",pod=~\"@-redis-\\\\d\" }[5m])) / on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-redis-\\\\d\", resource=\"cpu\"})) * 100,0.01)",
        "memory": "round(max by (pod)(container_memory_usage_bytes{namespace=~\"$\",pod=~\"@-redis-\\\\d\" })/ on (pod) (max by (pod) (kube_pod_container_resource_limits{namespace=~\"$\", pod=~\"@-redis-\\\\d\", resource=\"memory\"})) * 100,0.01)",
        "disk_capacity": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_capacity_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-redis-\\\\d\"}))",
        "disk_used": "(max by (persistentvolumeclaim,namespace) (kubelet_volume_stats_used_bytes {namespace=~\"$\", persistentvolumeclaim=~\"data-@-redis-\\\\d\"}))",
        "uptime": "redis_uptime_in_seconds{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}",
        "connections": "sum(redis_connected_clients{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"})",

        "commands": "sum(irate(redis_commands_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"} [1m])) by (cmd, namespace, app_kubernetes_io_instance)",

        "blocked_connections": "sum(redis_blocked_clients{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"})",
        "items_per_db": "sum (redis_db_keys{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}) by (db)",
        "command_latency": "avg(irate(redis_commands_duration_seconds_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (cmd) / avg(irate(redis_commands_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])) by (cmd)",
        "key_evictions": "irate(redis_evicted_keys_total{namespace=~\"$\", app_kubernetes_io_instance=~\"@\"}[1m])",
        "hits_ratio": "avg(irate(redis_keyspace_hits_total{namespace=~\"$\",app_kubernetes_io_instance=\"@\"}[1m]) / clamp_min((irate(redis_keyspace_misses_total{namespace=~\"$\",app_kubernetes_io_instance=~\"@\"}[1m]) + irate(redis_keyspace_hits_total{namespace=~\"$\",app_kubernetes_io_instance=\"@\"}[1m])), 0.01)) by (pod, app_kubernetes_io_instance)",
    }

    var result string
    switch query.Type {
    case "mysql":
        result = mysql[query.Query]
    case "redis":
        result = redis[query.Query]
    case "mongo":
        result = mongo[query.Query]
    case "pgsql":
        result = pgsql[query.Query]
    }

    fmt.Println(query.Cluster)
	result = strings.ReplaceAll(result, "$", query.NS)
	result = strings.ReplaceAll(result, "@", query.Cluster)
	return result, nil
}

func Prometheus_new(query *api.PromRequest) ([]byte, error) {
    result, _ := get_query_from_file(query)
	log.Println(result)

	formData := url.Values{}
	formData.Set("query", result)
	if query.Range.Start != "" {
		formData.Set("start", query.Range.Start)
		formData.Set("end", query.Range.End)
		formData.Set("step", query.Range.Step)
	} else if query.Range.Time != "" {
		formData.Set("time", query.Range.Time)
	}
	bf := bytes.NewBufferString(formData.Encode())

	prometheusHost := GetPromServerFromEnv()

	if prometheusHost == "" {
		return nil, api.ErrNoPromHost
	}

	log.Println(bf)

	if len(formData.Get("start")) == 0 {
		return Request(prometheusHost+"/api/v1/query", bf)
	} else {
		return Request(prometheusHost+"/api/v1/query_range", bf)
	}
}

// func ToMap(obj interface{}) (map[string]string, error) {
// 	m := make(map[string]string)
// 
// 	err := mapstructure.Decode(obj, &m)
// 	if err != nil {
// 		return nil, err
// 	}
// 
// 	return m, nil
// }
// 
// func GjnMatchStr(m map[string]string) (string, error) {
// 	// m, err := ToMap(obj)
// 	// if err != nil {
// 	// 	return "", err
// 	// }
// 
// 	builder := strings.Builder{}
// 	// 遍历 map，将每个非空的键值对拼接成一个字符串
// 	for k, v := range m {
// 		if v != "" {
// 			if builder.Len() > 0 {
// 				builder.WriteString(", ")
// 			}
// 			builder.WriteString(fmt.Sprintf("%s=~\"%s\"", k, v))
// 		}
// 	}
// 	return builder.String(), nil
// }

func GetPromServerFromEnv() string {
	host, port := os.Getenv("PROMETHEUS_SERVICE_HOST"), os.Getenv("PROMETHEUS_SERVICE_PORT")

	if len(host) == 0 || len(port) == 0 {
		return "http://192.168.0.156:8080"
        // return "http://prometheus.cloud.sealos.run"
        // return ""
	}
	return "http://" + net.JoinHostPort(host, port)
}
