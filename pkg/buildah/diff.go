// Copyright Â© 2023 sealos.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package buildah

import (
	"context"
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"

	"github.com/labring/sealos/pkg/utils/file"
	"github.com/labring/sealos/pkg/utils/logger"
	"github.com/labring/sealos/pkg/utils/rand"
)

type diff struct {
	tag       string
	output    string
	transport string
	cleanup   bool

	buildah Interface
}

func newDiffCommand() *cobra.Command {
	opts := &diff{
		tag:       "tmp:patch",
		transport: OCIArchive,
	}
	cmd := &cobra.Command{
		Use:   "diff",
		Short: "Compare files in two cloudimages and then build a new patch type cloudimage",
		Args:  cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			return opts.Run(cmd.Context(), args)
		},
	}
	opts.RegisterFlags(cmd.Flags())
	return cmd
}

func (d *diff) RegisterFlags(fs *pflag.FlagSet) {
	fs.StringVarP(&d.tag, "tag", "t", d.tag, "image tag for output")
	fs.StringVarP(&d.output, "output", "o", d.output, "save image into tar archive file if specified")
	fs.StringVar(&d.transport, "transport", d.transport, "transport for archive file")
	fs.BoolVar(&d.cleanup, "cleanup", true, "automatically cleans up the files generated by this process")
	_ = fs.MarkHidden("cleanup")
}

func clean(bder Interface, ctr string) {
	if err := bder.Delete(ctr); err != nil {
		logger.Error("failed to remove container: %v", err)
	}
}

func (d *diff) Run(_ context.Context, args []string) (err error) {
	// nosemgrep: trailofbits.go.questionable-assignment.questionable-assignment
	d.buildah, err = New("fake")
	if err != nil {
		return err
	}
	images, err := Preload(d.buildah, args, d.transport)
	if err != nil {
		return err
	}

	src, err := d.buildah.Create(rand.Generator(8), images[0])
	if err != nil {
		return err
	}
	if d.cleanup {
		defer clean(d.buildah, src.Container)
	}
	dest, err := d.buildah.Create(rand.Generator(8), images[1])
	if err != nil {
		return err
	}
	if d.cleanup {
		defer clean(d.buildah, dest.Container)
	}

	tmpDir, err := file.MkTmpdir("")
	if err != nil {
		return err
	}
	logger.Info("source: %s, dest: %s", src.MountPoint, dest.MountPoint)
	logger.Info("store diff files in temporary directory %s", tmpDir)
	if d.cleanup {
		defer os.RemoveAll(tmpDir)
	}
	// file entries are few enough, so use slice is fine.
	entries, err := os.ReadDir(dest.MountPoint)
	if err != nil {
		return err
	}
	filter := func(path string, info fs.FileInfo) bool {
		path = strings.TrimPrefix(path, "/")
		// invoke callback function to the rest of entries other than registry dir
		if strings.HasPrefix(path, "registry") {
			return false
		}
		for i := range entries {
			if strings.HasPrefix(path, entries[i].Name()) {
				return true
			}
		}
		return false
	}
	callback := func(path string, info fs.FileInfo) error {
		if info.IsDir() {
			return os.MkdirAll(filepath.Join(tmpDir, path), info.Mode())
		}
		return file.Copy(filepath.Join(dest.MountPoint, path), filepath.Join(tmpDir, path))
	}
	err = file.DiffWithCallback(src.MountPoint, dest.MountPoint, nil, filter, callback)
	if err != nil {
		return err
	}

	exe := getSelfExe()
	// nosemgrep: go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
	buildCmd := exec.Command(exe, "build", fmt.Sprintf("-t=%s", d.tag), "--save-image=false", tmpDir)
	buildCmd.Stdout = os.Stdout
	buildCmd.Stderr = os.Stderr
	if err = buildCmd.Run(); err != nil {
		return err
	}
	if d.output != "" {
		// nosemgrep: go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
		saveCmd := exec.Command(exe, "save", fmt.Sprintf("-o=%s", d.output), d.tag)
		saveCmd.Stdout = os.Stdout
		saveCmd.Stderr = os.Stderr
		return saveCmd.Run()
	}
	return nil
}
